//////////////////////////////////////////////////////////////////////////////
// language name

Language:		SQR


//////////////////////////////////////////////////////////////////////////////

Filter: 		SQR files (*.sqr)|*.sqr

//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// language case sensitivity
//			0  - no
//			1  - yes

CaseSensitive:		0


//////////////////////////////////////////////////////////////////////////////
// comment type: LineComment - comment to the end of line
// BlockCommentBeg - block comment begin, it could be
// multiline
// BlockCommentEnd - block comment end

LineComment:		!
BlockCommentBeg:
BlockCommentEnd:


//////////////////////////////////////////////////////////////////////////////
// identifier characters
// note: characters shouldn't be delimited, except arrays
// array of chars could be defined as from_char..to_char

// IdentifierBegChars:	   a..z A..Z _%@. ?
// IdentifierChars:	   a..z A..Z _ 0..9 ? -

IdentifierBegChars:	a..z A..Z
IdentifierChars:	a..z A..Z _ 0..9 ? -

//////////////////////////////////////////////////////////////////////////////
// numeric constants begin characters
// note: characters shouldn't be delimited, except arrays
// array of chars could be defined as from_char..to_char
// number always starts with 0..9 except when NumConstBeg
// defines other

NumConstBegChars:	0..9


//////////////////////////////////////////////////////////////////////////////
// numeric constants characters
// note: characters shouldn't be delimited, except arrays
// array of chars could be defined as from_char..to_char
// number always starts with 0..9 except when NumConstBeg
// defines other

NumConstChars:		0..9 abcdefhABCDEFH


//////////////////////////////////////////////////////////////////////////////
// escape character

EscapeChar:


//////////////////////////////////////////////////////////////////////////////
// keyword table
// note: delimited with spaces, lines could be wrapped
// you may divide keywords into two groups which can be
// highlighted differently

// All Keywords

KeyWords1:		  add alter-locale alter-printer point-size
			  #define #else #end-if #if #ifdef #ifndef
			  not and or desc group having in any some all between exists
			  like from order to union intersect minus distinct use xor as
			  array-add array-divide array-multiply array-subtract ask begin-document
			  begin-footing begin-heading begin-procedure begin-report begin-select
			  begin-setup begin-sql break close add  begin-program end-program
			  call commit concat connect create create-array date-time display divide
			  do edit else encode end-document end-evaluate end-footing end-heading
			  end-if end-procedure end-report end-select end-setup end-sql end-while
			  evaluate execute upper exit-select extract fill find get goto if input
			  into let isnull load-lookup lookup lower lowercase match move multiply
			  new-column new-page new-report next-listing no-formfeed nop on-break
			  on-error open page-number page-size position printer-init put read
			  rollback select set show stop string subtract unstring uppercase
			  use-column when when-other where while with wrap write noline output print
			  declare-layout end-declare declare-report loops
			  insert update delete values last-page
			  char varchar datetime smalldatetime float int smallint number money tinyint
KeyWords2:
KeyWords3:

//////////////////////////////////////////////////////////////////////////////
// string delimiter: StringBegChar - string begin char
// StringEndChar - string end char
// MultilineStrings - enables multiline strings, as perl
// has it

StringBegChar:		'
StringEndChar:		'
MultilineStrings:	1


//////////////////////////////////////////////////////////////////////////////
// use preprocessor: 0 - no
// 1 - yes
// note: if yes, '#' and statements after it will be
// highlighted with Preprocessor defined colors

UsePreprocessor:	0


//////////////////////////////////////////////////////////////////////////////
// highlight line: 0 - no
// 1 - yes
// note: if yes, current line will be highlighted

CurrLineHighlighted:	1


//////////////////////////////////////////////////////////////////////////////
// colors
// note:		first value is foreground, second is background color
//			  and third (optional) represents font attribute:
//			  B - bold
//			  I - italic
//			  U - underline
//			  S - strike out
//			  attributes can be combined: eg. B or BI
//			as value, it could be used any standard windows color:
//			  clBlack, clMaroon, clGreen, clOlive, clNavy,
//			  clPurple, clTeal, clGray, clSilver, clRed, clLime,
//			  clYellow, clBlue, clFuchsia, clAqua, clLtGray,
//			  clDkGray, clWhite, clScrollBar, clBackground,
//			  clActiveCaption, clInactiveCaption, clMenu, clWindow,
//			  clWindowFrame, clMenuText, clWindowText, clCaptionText,
//			  clActiveBorder, clInactiveBorder, clAppWorkSpace,
//			  clHighlight, clHighlightText, clBtnFace, clBtnShadow,
//			  clGrayText, clBtnText, clInactiveCaptionText,
//			  clBtnHighlight, cl3DDkShadow, cl3DLight, clInfoText,
//			  clInfoBk
//			as value, it could be used hex numeric constant too:
//			  $BBGGRR - BB: blue, GG: green, RR: red, eg: $FF6A00

SpaceCol:		clWindowText clWindow
Keyword1Col:		clBlue clWindow
Keyword2Col:		clTeal clWindow B
Keyword3Col:		clBlue clWindow
IdentifierCol:		clWindowText clWindow
CommentCol:		clGreen clWindow B
NumberCol:		clRed clWindow
StringCol:		clMaroon clWindow I
SymbolCol:		clBlack clWindow B
PreprocessorCol:	clNavy clWindow
SelectionCol:		clWhite clNavy
CurrentLineCol: 	clBlack $00C0FFFF

OverrideTxtFgColor:	0
