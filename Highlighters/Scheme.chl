//////////////////////////////////////////////////////////////////////////////
//
// Scheme highlighter
// written by Benoît DEJEAN - bnet@ifrance.com
//
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////

Language:               Scheme


//////////////////////////////////////////////////////////////////////////////

Filter:                 Scheme files (*.ss,*.scm)|*.ss;*.scm


//////////////////////////////////////////////////////////////////////////////

HelpFile:


//////////////////////////////////////////////////////////////////////////////

CaseSensitive:          0


//////////////////////////////////////////////////////////////////////////////

LineComment:            ;
BlockCommentBeg:        /*
BlockCommentEnd:        */


//////////////////////////////////////////////////////////////////////////////

IdentifierBegChars:     a..z A..Z _%@?&$#
IdentifierChars:        a..z A..Z _ 0..9 ?&%$#@:

//////////////////////////////////////////////////////////////////////////////

NumConstBegChars:       0..9


//////////////////////////////////////////////////////////////////////////////

NumConstChars:          0..9 .


//////////////////////////////////////////////////////////////////////////////

EscapeChar:             \


//////////////////////////////////////////////////////////////////////////////

// reserved words

KeyWords1:              =
                        >
                        do
                        or
                        and
                        else    
                        quasiquote
                        begin
                        if
                        quote                   
                        case
                        lambda
                        set!
                        cond
                        let
                        unquote
                        define
                        let*
                        unquote-splicing
                        delay
                        letrec


// predefined words

KeyWords2:              -
                        +
                        *
                        /
                        <
                        >=
                        <=
                        abs
                        acos
                        angle
                        append
                        apply
                        approximate
                        asin
                        assoc
                        assq
                        assv
                        atan
                        atom?
                        boolean?
                        bound-identifier=?
                        caar
                        cadr
                        cdar
                        cddr
                        caaar
                        caadr
                        cadar
                        caddr
                        cdaar
                        cdadr
                        cddar
                        cdddr
                        caaaar
                        caaadr
                        caadar
                        caaddr
                        cadaar
                        cadadr
                        caddar
                        cadddr
                        cdaaar
                        cdaadr
                        cdadar
                        cdaddr
                        cddaar
                        cddadr
                        cdddar
                        cddddr
                        call-with-current-continuation
                        call-with-input-file          
                        call-with-output-file
                        call/cc
                        car
                        catch
                        cdddar
                        cddddr
                        cdr
                        ceiling
                        char->integer
                        char-alphabetic?
                        char-ci<=?
                        char-ci<?
                        char-ci=?
                        char-ci>=?
                        char-ci>?
                        char-downcase
                        char-lower-case?
                        char-numeric?
                        char-ready
                        char-ready?
                        char-upcase
                        char-upper-case?
                        char-whitespace?
                        char<=?         
                        char<?
                        char=?
                        char>=?
                        char>?
                        char?
                        close-input-port
                        close-output-port
                        complex?
                        cons
                        construct-identifier
                        cos
                        current-input-port
                        current-output-port
                        define
                        define-syntax
                        denominator
                        display
                        eof-object?
                        eq?
                        equal?
                        eqv?
                        even?
                        exact->inexact
                        exact?
                        exp
                        expt
                        floor
                        foo
                        for-each
                        force
                        free-identifier=?
                        gcd
                        gen-counter
                        gen-loser
                        generate-identifier
                        identifier->symbol
                        identifier?
                        imag-part
                        inexact->exact
                        inexact?
                        input-port?
                        integer->char
                        integer?
                        last-pair
                        lcm
                        length
                        let-syntax
                        letrec-syntax
                        list
                        list->string
                        list->vector
                        list-ref
                        list-tail
                        list?
                        load
                        log
                        macro
                        magnitude
                        make-polar
                        make-promise
                        make-rectangular
                        make-string
                        make-vector
                        map
                        map-streams
                        max
                        member
                        memq
                        memv
                        min
                        modulo
                        negative?
                        newline
                        nil
                        not
                        null?
                        number->string
                        number?
                        numerator
                        odd?
                        open-input-file
                        open-output-file
                        output-port?    
                        pair?
                        peek-char
                        positive?
                        procedure?
                        quotient
                        rational?
                        rationalize
                        read
                        read-char
                        real-part
                        real?
                        remainder
                        return
                        reverse
                        round
                        sequence
                        set-car!
                        set-cdr!
                        sin
                        sqrt
                        string
                        string->list
                        string->number
                        string->symbol
                        string-append
                        string-ci<=?
                        string-ci<?
                        string-ci=?
                        string-ci>=?
                        string-ci>?
                        string-copy
                        string-fill!
                        string-length
                        string-ref
                        string-set!
                        string<=?
                        string<?
                        string=?
                        string>=?
                        string>?
                        string?
                        substring
                        symbol->string
                        symbol?
                        syntax
                        syntax-rules
                        tan
                        transcript-off
                        transcript-on
                        truncate
                        unwrap-syntax
                        values-list
                        vector
                        vector->list
                        vector-fill!
                        vector-length
                        vector-ref
                        vector-set!
                        vector?
                        with-input-from-file
                        with-output-to-file
                        write
                        write-char
                        zero?



KeyWords3:


//////////////////////////////////////////////////////////////////////////////

StringBegChar:          "
StringEndChar:          "
MultilineStrings:       0


//////////////////////////////////////////////////////////////////////////////

UsePreprocessor:        0


//////////////////////////////////////////////////////////////////////////////

CurrLineHighlighted:    0


//////////////////////////////////////////////////////////////////////////////

SpaceCol:               clWindowText clWindow
Keyword1Col:            clBlue clWindow B
Keyword2Col:            clBlue clWindow
Keyword3Col:            clPurple clWindow
IdentifierCol:          clWindowText clWindow
CommentCol:             clGray clWindow
NumberCol:              clRed clWindow
StringCol:              clTeal clWindow
SymbolCol:              clPurple clWindow
PreprocessorCol:        clBlue clWindow
SelectionCol:           clWhite clActiveCaption
CurrentLineCol:         clBlack clActiveCaption
